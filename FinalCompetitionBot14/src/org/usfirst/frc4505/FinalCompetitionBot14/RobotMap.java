// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.FinalCompetitionBot14;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainfrontLeftWheel;
    public static SpeedController drivetrainbackLeftWheel;
    public static SpeedController drivetrainfrontRightWheel;
    public static SpeedController drivetrainbackRightWheel;
    public static RobotDrive drivetrainMecanumDrive;
    public static SpeedController catapultcatapultMotor;
    public static DigitalInput catapultcatapultLimit;
    public static SpeedController catapultcatapultGrabber;
    public static AnalogChannel sensorsMaxBotixBall;
    public static AnalogChannel sensorsMaxBotixWall;
    public static DigitalOutput sensorsRgbRed;
    public static DigitalOutput sensorsRgbGreen;
    public static DigitalOutput sensorsRgbBlue;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainfrontLeftWheel = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "frontLeftWheel", (Victor) drivetrainfrontLeftWheel);
        
        drivetrainbackLeftWheel = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "backLeftWheel", (Victor) drivetrainbackLeftWheel);
        
        drivetrainfrontRightWheel = new Victor(1, 3);
	LiveWindow.addActuator("Drivetrain", "frontRightWheel", (Victor) drivetrainfrontRightWheel);
        
        drivetrainbackRightWheel = new Victor(1, 4);
	LiveWindow.addActuator("Drivetrain", "backRightWheel", (Victor) drivetrainbackRightWheel);
        
        drivetrainMecanumDrive = new RobotDrive(drivetrainfrontLeftWheel, drivetrainbackLeftWheel,
              drivetrainfrontRightWheel, drivetrainbackRightWheel);
	
        drivetrainMecanumDrive.setSafetyEnabled(true);
        drivetrainMecanumDrive.setExpiration(0.1);
        drivetrainMecanumDrive.setSensitivity(0.5);
        drivetrainMecanumDrive.setMaxOutput(1.0);
        drivetrainMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        catapultcatapultMotor = new Jaguar(1, 5);
	LiveWindow.addActuator("Catapult", "catapultMotor", (Jaguar) catapultcatapultMotor);
        
        catapultcatapultLimit = new DigitalInput(1, 5);
	LiveWindow.addSensor("Catapult", "catapultLimit", catapultcatapultLimit);
        
        catapultcatapultGrabber = new Talon(1, 7);
	LiveWindow.addActuator("Catapult", "catapultGrabber", (Talon) catapultcatapultGrabber);
        
        sensorsMaxBotixBall = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Sensors", "MaxBotixBall", sensorsMaxBotixBall);
        
        sensorsMaxBotixWall = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Sensors", "MaxBotixWall", sensorsMaxBotixWall);
        

        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        sensorsRgbRed = new DigitalOutput(1, 12);
        LiveWindow.addSensor("Sensors", "Red", sensorsRgbRed);
        sensorsRgbGreen = new DigitalOutput(1, 13);
        LiveWindow.addSensor("Sensors", "Green", sensorsRgbGreen);
        sensorsRgbBlue = new DigitalOutput(1, 14);
        LiveWindow.addSensor("Sensors", "Blue", sensorsRgbBlue);
    }
}
