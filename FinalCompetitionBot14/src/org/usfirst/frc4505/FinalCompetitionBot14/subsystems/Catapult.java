// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.FinalCompetitionBot14.subsystems;
import org.usfirst.frc4505.FinalCompetitionBot14.RobotMap;
import org.usfirst.frc4505.FinalCompetitionBot14.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4505.FinalCompetitionBot14.Robot;
/**
 *
 */
public class Catapult extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController catapultMotor = RobotMap.catapultcatapultMotor;
    DigitalInput catapultLimit = RobotMap.catapultcatapultLimit;
    SpeedController catapultGrabber = RobotMap.catapultcatapultGrabber;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double timeToFire = .25;
    public double powerForFire = 1;
    public double trussTimeToFire = .2;
    public double clawSpeed = .65;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void moveClaws(){
        clawSpeed = SmartDashboard.getNumber("clawSpeed");
        if(Robot.oi.getXboxControllerTwo().getY() > .6){
            catapultGrabber.set(Robot.oi.getXboxControllerTwo().getY() * -clawSpeed);
        }
        else if(Robot.oi.getXboxControllerTwo().getY() < -.6){
            catapultGrabber.set(Robot.oi.getXboxControllerTwo().getY() * -clawSpeed);
        }
        else{
            catapultGrabber.set(0);
        }
    }
    public void moveCatapult() {
        timeToFire = SmartDashboard.getNumber("timeToFire");
        powerForFire = SmartDashboard.getNumber("powerForFire");
        double start = Timer.getFPGATimestamp();
        //if fire button is pressed
        if ((Robot.oi.getTrigger2() < -.8) && ((!RobotMap.catapultcatapultLimit.get()) || (Robot.oi.getXboxControllerTwo().getRawButton(1)))) {
            //truss fire - B
            if (Robot.oi.getXboxControllerTwo().getRawButton(2)) { 
                while (Timer.getFPGATimestamp() - start < trussTimeToFire) {
//                    Robot.catapult.closeClaws(-0.5, 0.5);
//                    Timer.delay(0.5);
//                    Robot.sensors.setColor("magenta");
                    Robot.drivetrain.driveBot(Robot.oi.xboxControllerOne.getMagnitude(), Robot.oi.xboxControllerOne.getDirectionDegrees(), Robot.oi.getSecondX());
                    catapultMotor.set(powerForFire);
                }
               //slow raise override - X
            } else if (Robot.oi.getXboxControllerTwo().getRawButton(3)) { 
                while (Timer.getFPGATimestamp() - start < timeToFire) {
//                    Robot.sensors.setColor("magenta");
                    Robot.drivetrain.driveBot(Robot.oi.xboxControllerOne.getMagnitude(), Robot.oi.xboxControllerOne.getDirectionDegrees(), Robot.oi.getSecondX());
                    catapultMotor.set(.2);
                }
            } else {
                //Regular Fire
                while (Timer.getFPGATimestamp() - start < timeToFire + 0.8) {
                    Robot.sensors.setColor("yellow");
                    Robot.catapult.closeClaws(-0.5, 0.5);
                    Timer.delay(0.3);
                    Robot.sensors.setColor("magenta");
                    Robot.drivetrain.driveBot(Robot.oi.xboxControllerOne.getMagnitude(), Robot.oi.xboxControllerOne.getDirectionDegrees(), Robot.oi.getSecondX());
                    catapultMotor.set(powerForFire);
                }
            }
           //lowers catapult
        } else if ((RobotMap.catapultcatapultLimit.get()) && (Robot.oi.getTrigger2() > .8)) {
            while (RobotMap.catapultcatapultLimit.get()) {
//                Robot.sensors.setColor("cyan");
                //cancels lowering
                if (Robot.oi.getXboxControllerTwo().getRawButton(3)) {
                    return;
                }
                moveClaws();
                Robot.drivetrain.driveBot(Robot.oi.xboxControllerOne.getMagnitude(), Robot.oi.xboxControllerOne.getDirectionDegrees(), Robot.oi.getSecondX());
                catapultMotor.set(-.5);
            }
            //Timer.delay(.5);
        } else {
            catapultMotor.set(0);
        }
    }
    
    public void openClaws(double speed, double time){
        double startTime = Timer.getFPGATimestamp();
        while(Timer.getFPGATimestamp() - startTime < time){
//            Robot.sensors.setColor("blue");
            catapultGrabber.set(-speed);
        }
        catapultGrabber.set(0);
    }
    
    public void closeClaws(double speed, double time){
        double startTime = Timer.getFPGATimestamp();
        while(Timer.getFPGATimestamp() - startTime < time){
//            Robot.sensors.setColor("yellow");
            catapultGrabber.set(speed);
        }
        catapultGrabber.set(0);
    }

    public void autoLowerCatapult() {
        if ((RobotMap.catapultcatapultLimit.get())) {
            catapultMotor.set(-.5);
            Timer.delay(1);
            catapultMotor.set(-.5);
            Timer.delay(1);
            double startTime = Timer.getFPGATimestamp();
            while (RobotMap.catapultcatapultLimit.get() && ((Timer.getFPGATimestamp() - startTime < 5))) {
                catapultMotor.set(-.2);
            }
            startTime = Timer.getFPGATimestamp();
            while(RobotMap.catapultcatapultLimit.get() && ((Timer.getFPGATimestamp() - startTime < 2))){
                catapultMotor.set(-.35);
            }
        }
        catapultMotor.set(0);
    }

    public void autoFireCatapult() {
        double start = Timer.getFPGATimestamp();
        //should we not check about button just in case it doesn't stay hit etc?
        if ((!RobotMap.catapultcatapultLimit.get())) {
            while (Timer.getFPGATimestamp() - start < timeToFire) {
                catapultMotor.set(1);
            }
        }
        catapultMotor.set(0);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new UseCatapult());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
