// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.MecanumBot14;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainBackLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainBackRight;
    public static RobotDrive driveTrainMecanumDrive;
    public static DigitalInput grabberBackLArmLimit;
    public static DigitalInput grabberBackRArmLimit;
    public static DigitalInput grabberFrontLArmLimit;
    public static DigitalInput grabberFrontRArmLimit;
    public static SpeedController grabberRightArm;
    public static SpeedController grabberLeftArm;
    public static Relay grabberLeftBelt;
    public static Relay grabberRightBelt;
    public static AnalogChannel sensorsMaxBotixUltra;
    public static AnalogChannel sensorsInfraredSensor;
    public static DigitalInput catapultCatapultLimit;
    public static SpeedController catapultCatapult;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalOutput sensorsRgbRed;
    public static DigitalOutput sensorsRgbGreen;
    public static DigitalOutput sensorsRgbBlue;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeft = new Victor(1, 1);
	LiveWindow.addActuator("DriveTrain", "FrontLeft", (Victor) driveTrainFrontLeft);
        
        driveTrainBackLeft = new Victor(1, 2);
	LiveWindow.addActuator("DriveTrain", "BackLeft", (Victor) driveTrainBackLeft);
        
        driveTrainFrontRight = new Victor(1, 3);
	LiveWindow.addActuator("DriveTrain", "FrontRight", (Victor) driveTrainFrontRight);
        
        driveTrainBackRight = new Victor(1, 4);
	LiveWindow.addActuator("DriveTrain", "BackRight", (Victor) driveTrainBackRight);
        
        driveTrainMecanumDrive = new RobotDrive(driveTrainFrontLeft, driveTrainBackLeft,
              driveTrainFrontRight, driveTrainBackRight);
	
        driveTrainMecanumDrive.setSafetyEnabled(true);
        driveTrainMecanumDrive.setExpiration(0.1);
        driveTrainMecanumDrive.setSensitivity(0.5);
        driveTrainMecanumDrive.setMaxOutput(1.0);
        driveTrainMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainMecanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        grabberBackLArmLimit = new DigitalInput(1, 1);
	LiveWindow.addSensor("Grabber", "BackLArmLimit", grabberBackLArmLimit);
        
        grabberBackRArmLimit = new DigitalInput(1, 2);
	LiveWindow.addSensor("Grabber", "BackRArmLimit", grabberBackRArmLimit);
        
        grabberFrontLArmLimit = new DigitalInput(1, 3);
	LiveWindow.addSensor("Grabber", "FrontLArmLimit", grabberFrontLArmLimit);
        
        grabberFrontRArmLimit = new DigitalInput(1, 4);
	LiveWindow.addSensor("Grabber", "FrontRArmLimit", grabberFrontRArmLimit);
        
        grabberRightArm = new Talon(1, 7);
	LiveWindow.addActuator("Grabber", "RightArm", (Talon) grabberRightArm);
        
        grabberLeftArm = new Talon(1, 8);
	LiveWindow.addActuator("Grabber", "LeftArm", (Talon) grabberLeftArm);
        
        grabberLeftBelt = new Relay(1, 1);
	LiveWindow.addActuator("Grabber", "LeftBelt", grabberLeftBelt);
        
        grabberRightBelt = new Relay(1, 2);
	LiveWindow.addActuator("Grabber", "RightBelt", grabberRightBelt);
        
        sensorsMaxBotixUltra = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Sensors", "MaxBotixUltra", sensorsMaxBotixUltra);
        
        sensorsInfraredSensor = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Sensors", "InfraredSensor", sensorsInfraredSensor);
        
        catapultCatapultLimit = new DigitalInput(1, 5);
	LiveWindow.addSensor("Catapult", "CatapultLimit", catapultCatapultLimit);
        
        catapultCatapult = new Jaguar(1, 5);
	LiveWindow.addActuator("Catapult", "Catapult", (Jaguar) catapultCatapult);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        
        sensorsRgbRed = new DigitalOutput(1, 6);
        LiveWindow.addSensor("Sensors", "Red", sensorsRgbRed);
        sensorsRgbGreen = new DigitalOutput(1, 7);
        LiveWindow.addSensor("Sensors", "Green", sensorsRgbGreen);
        sensorsRgbBlue = new DigitalOutput(1, 8);
        LiveWindow.addSensor("Sensors", "Blue", sensorsRgbBlue);
    // VICTOR -- white on OUTSIDE
    // TALON -- white on OUTSIDE
    // JAG -- white on OUTISDE
    }
}
