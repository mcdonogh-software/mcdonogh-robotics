// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.MecanumBot14.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4505.MecanumBot14.Robot;
import org.usfirst.frc4505.MecanumBot14.RobotMap;
/**
 *
 */
public class  FireCatapult extends Command {
    public FireCatapult() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapult);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        SmartDashboard.putNumber("timeToFire", Robot.catapult.timeToFire);
        SmartDashboard.putNumber("powerForFire", Robot.catapult.powerForFire);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //Robot.catapult.fireCatapult();
        SmartDashboard.putBoolean("Catapult Limit Switch", RobotMap.catapultCatapultLimit.get());
        SmartDashboard.putBoolean("Override", Robot.oi.getControllerDos().getRawButton(1));
        SmartDashboard.putBoolean("Back Right Limit", RobotMap.grabberBackRArmLimit.get());
        SmartDashboard.putBoolean("Back Left Limit", RobotMap.grabberBackLArmLimit.get());
        SmartDashboard.putBoolean("Ready to Fire?", ((!RobotMap.catapultCatapultLimit.get()) && RobotMap.grabberBackLArmLimit.get() && RobotMap.grabberBackRArmLimit.get() && Robot.grabber.hasBall() && Robot.catapult.suchClose() || (Robot.oi.getControllerDos().getRawButton(1))));
        SmartDashboard.putBoolean("Too Close", Robot.catapult.suchClose());
 //       SmartDashboard.putNumber("Hotzone", Robot.hotzone.computeDistance(RobotMap.hotZoneCamera.getImage().))
          Robot.catapult.moveCatapult();
        
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
