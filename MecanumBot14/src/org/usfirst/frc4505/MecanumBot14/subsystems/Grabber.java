// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.MecanumBot14.subsystems;
import com.sun.squawk.util.MathUtils;
import org.usfirst.frc4505.MecanumBot14.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4505.MecanumBot14.Robot;
import org.usfirst.frc4505.MecanumBot14.commands.GrabberGroup;
/**
 *
 */
public class Grabber extends Subsystem {
    
    private boolean automaticEnabled;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput backLArmLimit = RobotMap.grabberBackLArmLimit;
    DigitalInput backRArmLimit = RobotMap.grabberBackRArmLimit;
    DigitalInput frontLArmLimit = RobotMap.grabberFrontLArmLimit;
    DigitalInput frontRArmLimit = RobotMap.grabberFrontRArmLimit;
    SpeedController rightArm = RobotMap.grabberRightArm;
    SpeedController leftArm = RobotMap.grabberLeftArm;
    Relay leftBelt = RobotMap.grabberLeftBelt;
    Relay rightBelt = RobotMap.grabberRightBelt;
    private boolean rightBeltOn = true;
    private boolean leftBeltOn = true;
         
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean hasBall () {
        return (!Robot.catapult.catapultLimit.get() && Robot.sensors.getRangeToBall() < 8);
    }

    public boolean readyToGrab() {
        return ((Robot.sensors.getRangeToBall() < 17) && !hasBall());
    }

    public void autoMoveArmsIn() {
//        while (RobotMap.grabberFrontLArmLimit.get() && RobotMap.grabberFrontRArmLimit.get()) {
//            rightArm.set(.65);
//            leftArm.set(-.65);
//        }
        double start = Timer.getFPGATimestamp();
        rightArm.set(1);
        leftArm.set(-1);
        Timer.delay(.5);
        rightArm.set(0);
        leftArm.set(0);
    }

    public void autoMoveArmsOut() {
        rightArm.set(-.5);
        leftArm.set(.5);
        Timer.delay(.5);
        rightArm.set(0);
        leftArm.set(0);
    }

    public void moveArms(double left, double right) {
        SmartDashboard.putBoolean("AutoMode", automaticEnabled);
        if (Robot.oi.getControllerDos().getRawButton(4)) {
            automaticEnabled = true;
        }
        if ((!RobotMap.grabberFrontLArmLimit.get()) && (!RobotMap.grabberFrontRArmLimit.get())) {
             automaticEnabled = false;
         }
        if(false){
            rightBelt.set(Relay.Value.kOff);
            leftBelt.set(Relay.Value.kOff);
            if(RobotMap.grabberFrontRArmLimit.get()){
                rightArm.set(-0.65);
            }
            else{
                rightArm.set(0);
            }
            if(RobotMap.grabberFrontLArmLimit.get()){
                leftArm.set(0.65);
            }
            else{
                leftArm.set(0);
            }
            return;
        }
        SmartDashboard.putBoolean("FrontLeftLimit", RobotMap.grabberFrontLArmLimit.get());
        SmartDashboard.putBoolean("FrontRightLimit", RobotMap.grabberFrontRArmLimit.get());
        SmartDashboard.putBoolean("BackLeftLimit", RobotMap.grabberBackLArmLimit.get());
        SmartDashboard.putBoolean("BackRightLimit", RobotMap.grabberBackRArmLimit.get());
        SmartDashboard.putNumber("RightArm", right);
        SmartDashboard.putNumber("LeftArm", left);
        if (!RobotMap.grabberBackLArmLimit.get()){
            leftBeltOn = false;
        }
        if (!RobotMap.grabberBackRArmLimit.get()) {
            rightBeltOn = false;
        }
        if ((right < -.2)) {
                rightArm.set(right * 0.65);    
        } else if ((right > .2)) {
                rightArm.set(right * 0.65);  
        } else {
            rightArm.set(0);
        }
        if ((left > .2)) {
                leftArm.set(left*0.65);
            } 
        else if ((left < -.2)) {
                leftArm.set(left * 0.65);
        } 
        else {
            leftArm.set(0);
        }

    }

    public void MoveBelts(boolean leftBumper, boolean rightBumper) {
            if ((leftBumper)) {
                RobotMap.grabberLeftBelt.set(Relay.Value.kReverse);
                RobotMap.grabberRightBelt.set(Relay.Value.kForward);
            } else if ((rightBumper)) {
                RobotMap.grabberLeftBelt.set(Relay.Value.kForward);
                RobotMap.grabberRightBelt.set(Relay.Value.kReverse);
            } else {
                RobotMap.grabberLeftBelt.set(Relay.Value.kOff);
                RobotMap.grabberRightBelt.set(Relay.Value.kOff);
            }
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new GrabberGroup());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
