// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4505.MecanumBot14.subsystems;
import org.usfirst.frc4505.MecanumBot14.RobotMap;
import org.usfirst.frc4505.MecanumBot14.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4505.MecanumBot14.Robot;
/**
 *
 */
public class Catapult extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput catapultLimit = RobotMap.catapultCatapultLimit;
    SpeedController catapult = RobotMap.catapultCatapult;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double timeToFire = .25;
    public double powerForFire = 1;
    public double trussTimeToFire = .17;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean suchClose () {
        return (Robot.sensors.getRangeToWall() < 0); //need to code @ competition - depends based on power
    } //need new values
    public void moveCatapult() {
        timeToFire = SmartDashboard.getNumber("timeToFire");
        powerForFire = SmartDashboard.getNumber("powerForFire");
        double start = Timer.getFPGATimestamp();
        if ((Robot.oi.getTrigger2() < -.8) && ((!RobotMap.catapultCatapultLimit.get()) || (Robot.oi.getControllerDos().getRawButton(1)))) {
            if (Robot.oi.getControllerDos().getRawButton(2)) { //truss fire - B
                while (Timer.getFPGATimestamp() - start < trussTimeToFire) {
                    Robot.driveTrain.driveBot(Robot.oi.controllerUno.getMagnitude(), Robot.oi.controllerUno.getDirectionDegrees(), Robot.oi.getSecondX());
                    RobotMap.catapultCatapult.set(powerForFire);
                }
            } else if (Robot.oi.getControllerDos().getRawButton(3)) { //slow raise override - X
                while (Timer.getFPGATimestamp() - start < 1) {
                    Robot.grabber.MoveBelts(Robot.oi.getLBumper(), Robot.oi.getRBumper());
                    Robot.grabber.moveArms(Robot.oi.getControllerDos().getRawAxis(4), Robot.oi.getControllerDos().getX());
                    Robot.driveTrain.driveBot(Robot.oi.controllerUno.getMagnitude(), Robot.oi.controllerUno.getDirectionDegrees(), Robot.oi.getSecondX());
                    RobotMap.catapultCatapult.set(.35);
                }
            }else {
                while (Timer.getFPGATimestamp() - start < timeToFire) {
                    Robot.grabber.MoveBelts(Robot.oi.getLBumper(), Robot.oi.getRBumper());
                    Robot.grabber.moveArms(Robot.oi.getControllerDos().getRawAxis(4), Robot.oi.getControllerDos().getX());
                    Robot.driveTrain.driveBot(Robot.oi.controllerUno.getMagnitude(), Robot.oi.controllerUno.getDirectionDegrees(), Robot.oi.getSecondX());
                    RobotMap.catapultCatapult.set(powerForFire);
                }
            }
            } else if ((RobotMap.catapultCatapultLimit.get()) && (Robot.oi.getTrigger2() > .8)) {
                while (RobotMap.catapultCatapultLimit.get()) {
                    if(Robot.oi.getControllerDos().getRawButton(3)){
                        return;
                    }
                    Robot.grabber.MoveBelts(Robot.oi.getLBumper(), Robot.oi.getRBumper());
                    Robot.grabber.moveArms(Robot.oi.getControllerDos().getRawAxis(4), Robot.oi.getControllerDos().getX());
                    Robot.driveTrain.driveBot(Robot.oi.controllerUno.getMagnitude(), Robot.oi.controllerUno.getDirectionDegrees(), Robot.oi.getSecondX());
                    RobotMap.catapultCatapult.set(-.4);
                }
            Timer.delay(.5);
        } else {
            RobotMap.catapultCatapult.set(0);
        }
        //setDefaultCommand(new MySpecialCommand());
        //setDefaultCommand(new MySpecialCommand());
    }
    public void autoLowerCatapult() {
        if ((RobotMap.catapultCatapultLimit.get())) {
            RobotMap.catapultCatapult.set(-.26);
            Timer.delay(1);
            RobotMap.catapultCatapult.set(-.24);
            Timer.delay(1);
            double startTime = Timer.getFPGATimestamp();
            while (RobotMap.catapultCatapultLimit.get() && ((Timer.getFPGATimestamp() - startTime < 5))) {
                RobotMap.catapultCatapult.set(-.19);
            }
        }
        RobotMap.catapultCatapult.set(0);
    }
    public void autoFireCatapult() {
        double start = Timer.getFPGATimestamp();
        //should we not check about button just in case it doesn't stay hit etc?
        if ((!RobotMap.catapultCatapultLimit.get())) {
            while (Timer.getFPGATimestamp() - start < timeToFire) {
                RobotMap.catapultCatapult.set(1);
            }
        }
        RobotMap.catapultCatapult.set(0);
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new FireCatapult());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
}
